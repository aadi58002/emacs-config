;; ~/.config/emacs/templates

fundamental-mode ;; Available everywhere

(today (format-time-string "%Y-%m-%d"))

org-mode ;; Available Org-mode

(class "#+title: "
(p (string-join
 (mapcar #'capitalize
         (split-string
          (let (case-fold-search)
            (replace-regexp-in-string
             "\\([[:lower:]]\\)\\([[:upper:]]\\)" "\\1 \\2"
             (replace-regexp-in-string "\\([[:upper:]]\\)\\([[:upper:]][0-9[:lower:]]\\)"
                                       "\\1 \\2" (file-name-base(file-name-base buffer-file-name)))))
          "[^[:word:]0-9]+"
          )) " " )
) n "#+description: " (p "description") n "#+latex_header_extra: \\hypersetup{colorlinks=true,linkcolor=blue}" n "#+author: Aditya Yadav" n n "* " (p "heading") n q)

c++-mode c++-ts-mode ;; Available c++-mode

(chef "#include <bits/stdc++.h>" n n "using namespace std;" n n "int main(int argc, char *argv[]) {" n> "ios_base::sync_with_stdio(false);" n> "cin.tie(NULL);" n> "int testcase;" n> "cin >> testcase;" n> "while(testcase--){" n> q n "  }" n> "return 0;" n "}")

rustic-mode ;; Available rustic-mode

(cp "use std::io::{self, Write, BufRead};" n "macro_rules! input {" n "() => (std::io::stdin().lock().lines().next().map_or(Err(io::Error::new(io::ErrorKind::UnexpectedEof, \"Input BufRead reached EOF before\".to_string())), |line| line).unwrap());" n> "($($arg:tt)*) => ({ std::io::stdout().write_fmt(format_args!($($arg)*)).unwrap(); std::io::stdout().flush().unwrap(); input!() });" n "}" n n "fn main {" n> q n "}")