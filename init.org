#+TITLE: Config of Emacs
#+DESCRIPTION: This is the org mode version of my config of emacs
#+FILETAGS: Config
#+PROPERTY: header-args :tangle ~/.config/emacs/init.el

* Table of Content :toc:noexport:
- [[#customized-default][Customized Default]]
- [[#package-initialize][Package initialize]]
- [[#packages][Packages]]
  - [[#evil][Evil]]
  - [[#evil-collection][Evil Collection]]
  - [[#evil-nerd-commentor][Evil Nerd Commentor]]
  - [[#undo-fu][Undo fu]]
  - [[#general][General]]
  - [[#corfu][Corfu]]
  - [[#emacs][Emacs]]
  - [[#cape][Cape]]
  - [[#vertico][Vertico]]
  - [[#savehist][Savehist]]
  - [[#marginalia][Marginalia]]
  - [[#embark][Embark]]
  - [[#lsp-mode][Lsp Mode]]
  - [[#yasnippet][Yasnippet]]
  - [[#modus-theme][Modus theme]]
  - [[#orderless][Orderless]]
  - [[#magit][Magit]]
  - [[#which-key][Which Key]]
  - [[#consult][Consult]]
  - [[#embark-consult][Embark Consult]]
  - [[#doom-modeline][Doom modeline]]
  - [[#all-icons-mode-line][All Icons Mode Line]]
  - [[#all-icons-dired][All Icons Dired]]
  - [[#smart-compile][Smart compile]]
  - [[#emms][Emms]]
  - [[#git-gutter][Git gutter]]
  - [[#rainbow-delimiter][Rainbow Delimiter]]
  - [[#projectile][Projectile]]
  - [[#org][Org]]
- [[#custom-function][Custom Function]]
- [[#keybindings][Keybindings]]
  - [[#buffer-map][Buffer Map]]
  - [[#org-map][Org Map]]

* Customized Default
#+begin_src emacs-lisp
;;; init.el -*- lexical-binding: t; -*-
(set-default-coding-systems 'utf-8)
(setq inhibit-startup-message t)
(setq visible-bell t)
(setq-default tab-width 4)
(setq-default evil-shift-width tab-width)
(setq-default indent-tabs-mode nil)

(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative
      scroll-margin 30)


(setq dired-listing-switches "--group-directories-first -AglhL"
      dired-dwim-target t
      delete-by-moving-to-trash t
      +vertico-consult-fd-args "fd -p --color=never -i --type f -E node_modules --regex")

(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 10)
(set-face-attribute 'default nil :font "JetBrains Mono" :height 90)
(setq auto-save-default t
      truncate-string-ellipsis "<>"
      which-key-idle-delay 0.5
      evil-snipe-scope 'whole-visible)
(put 'narrow-to-region 'disabled nil)
(setq x-stretch-cursor t
      window-combination-resize t
      global-auto-revert-mode 1
      global-auto-revert-non-file-buffers t)
#+end_src
* Package initialize
#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* Packages
** Evil
Enable Evil
#+begin_src emacs-lisp
  (eval-when-compile (setq evil-want-keybinding nil))

  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-mode 1))
    (setq evil-move-cursor-back nil
          evil-want-fine-undo t
          evil-move-beyond-eol t
          evil-vsplit-window-right t
          evil-split-window-below t)
#+end_src
** Evil Collection
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src
** Evil Nerd Commentor
#+begin_src emacs-lisp
(use-package evil-nerd-commenter)
#+end_src
** Undo fu
#+begin_src emacs-lisp
(use-package undo-fu)
#+end_src
** General
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t))
#+end_src
** Corfu
#+begin_src emacs-lisp
        (use-package corfu
          :init
          (global-corfu-mode)
  ;; Setup corfu for popup like completion
  (customize-set-variable 'corfu-cycle t) ; Allows cycling through candidates
  (customize-set-variable 'corfu-auto t)  ; Enable auto completion
  (customize-set-variable 'corfu-auto-prefix 2) ; Complete with less prefix keys
  (customize-set-variable 'corfu-auto-delay 0.0) ; No delay for completion
  (customize-set-variable 'corfu-echo-documentation 0.25) ; Echo docs for current completion option

  (global-corfu-mode 1)
  (corfu-popupinfo-mode 1)

    )
#+end_src
** Emacs
#+begin_src emacs-lisp
(use-package emacs
  :init
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  (setq enable-recursive-minibuffers t)
  (setq completion-cycle-threshold 3)
  (setq tab-always-indent 'complete))
#+end_src
** Cape
#+begin_src emacs-lisp
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ;; ("C-c p l" . cape-line)
           )
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-history)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    ;; (add-to-list 'completion-at-point-functions #'cape-line)
    )
#+end_src
** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (setq vertico-count 20
          vertico-resize nil
          vertico-cycle t)
    (vertico-mode)
    (setq completion-styles '(substring orderless basic)))
#+end_src
** Savehist
#+begin_src emacs-lisp
(use-package savehist
  :init
  (savehist-mode))
#+end_src
** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :config
  (marginalia-mode)
  (setq marginalia-align 'center
	marginalia-align-offset 20))
#+end_src
** Embark
#+begin_src emacs-lisp
(use-package embark
  :ensure t
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
#+end_src
** Lsp Mode
#+begin_src emacs-lisp
(use-package lsp-mode)
#+end_src
** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (setq yas-snippet-dirs
      '("~/.config/emacs/snippets"))

(yas-global-mode 1) ;; or M-x yas-reload-all if you've started YASnippet already.
#+end_src
** Modus theme
#+begin_src emacs-lisp
(require-theme 'modus-themes)
(setq modus-themes-italic-constructs t
      modus-themes-bold-constructs nil)
(load-theme 'modus-vivendi)
#+end_src
** Orderless
#+begin_src emacs-lisp
(use-package orderless
  :demand t
  :config
  (defvar +orderless-dispatch-alist
    '((?% . char-fold-to-regexp)
      (?! . orderless-without-literal)
      (?`. orderless-initialism)
      (?= . orderless-literal)
      (?~ . orderless-flex)))

  (defun +orderless--suffix-regexp ()
    (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
        (format "[%c-%c]*$"
                consult--tofu-char
                (+ consult--tofu-char consult--tofu-range -1))
      "$"))

  (defun +orderless-dispatch (word _index _total)
    (cond
     ((string-suffix-p "$" word)
      `(orderless-regexp . ,(concat (substring word 0 -1) (+orderless--suffix-regexp))))
     ((and (or minibuffer-completing-file-name
               (derived-mode-p 'eshell-mode))
           (string-match-p "\\`\\.." word))
      `(orderless-regexp . ,(concat "\\." (substring word 1) (+orderless--suffix-regexp))))
     ((equal "!" word) `(orderless-literal . ""))
     ((if-let (x (assq (aref word 0) +orderless-dispatch-alist))
          (cons (cdr x) (substring word 1))
        (when-let (x (assq (aref word (1- (length word))) +orderless-dispatch-alist))
          (cons (cdr x) (substring word 0 -1)))))))

  (orderless-define-completion-style +orderless-with-initialism
    (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp)))
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)) ;; partial-completion is tried first
                                        (command (styles +orderless-with-initialism))
                                        (variable (styles +orderless-with-initialism))
                                        (symbol (styles +orderless-with-initialism)))
        orderless-component-separator #'orderless-escapable-split-on-space ;; allow escaping space with backslash!
        orderless-style-dispatchers '(+orderless-dispatch)))
#+end_src
** Magit
#+begin_src emacs-lisp
(use-package magit)
#+end_src
** Which Key
#+begin_src emacs-lisp
(use-package which-key 
  :init
  (which-key-mode))
#+end_src
** Consult
#+begin_src emacs-lisp
(use-package consult
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :config
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key (kbd "M-.")
   :preview-key '(:debounce 0.4 any))
  (setq consult-narrow-key "<")) ;; (kbd "C-+")
#+end_src
** Embark Consult
#+begin_src emacs-lisp
(use-package embark-consult
  :ensure t 
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** Doom modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src
** All Icons Mode Line
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t)
#+end_src
** All Icons Dired
#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :ensure t)
#+end_src
** Smart compile
#+begin_src emacs-lisp
(use-package smart-compile
  :config
  (setq smart-compile-check-build-system 'nil)
  (add-to-list 'smart-compile-alist '("\\.[Cc]+[Pp]*\\'" . "make %n && touch inputf.in && timeout 4s ./%n < inputf.in &> outputf.in "))
  (add-to-list 'smart-compile-alist  '("\\.rs$" . "touch inputf.in && cargo run -q < inputf.in &> outputf.in "))))
#+end_src
** Emms
#+begin_src emacs-lisp
(use-package emms
  :ensure t
  :init
    (require 'emms-setup)
    (emms-all)
    (setq emms-source-file-default-directory "~/Music/"
	  emms-info-functions '(emms-info-native)
	  emms-player-list '(emms-player-vlc)
	  emms-repeat-track t
	  emms-mode-line-mode t
	  emms-playlist-buffer-name "*Music*"
	  emms-playing-time-mode t
	  emms-info-asynchronously t
	  emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
    (emms-add-directory-tree "~/Music/")
    (emms-add-directory-tree "~/Videos/Test Video"))
#+end_src
** Git gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :config
    (global-git-gutter-mode +1))
#+end_src
** Rainbow Delimiter
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))
#+end_src
** Org
*** Keybindings
#+begin_src emacs-lisp
(evil-define-key 'normal org-mode-map (kbd "<TAB>") 'org-cycle)
(evil-define-key 'normal org-mode-map (kbd "<RET>") 'org-open-at-point)
#+end_src
*** Defaults
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (org-indent-mode 1)))
#+end_src
*** Evil org
#+begin_src emacs-lisp
(use-package evil-org)
#+end_src
*** Org cliplink
#+begin_src emacs-lisp
(use-package org-cliplink)
#+end_src
*** Link hint
#+begin_src emacs-lisp
(use-package link-hint
  :ensure t)
#+end_src
*** Org toc
#+begin_src emacs-lisp
(use-package toc-org)  
(add-hook 'org-mode-hook (lambda () (toc-org-mode 1)))
#+end_src
*** Org Superstar
#+begin_src emacs-lisp
(use-package org-superstar)
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src
*** Org appear
#+begin_src emacs-lisp
(use-package org-appear)
(add-hook 'org-mode-hook 'org-appear-mode)
#+end_src
*** Org tempo
#+begin_src emacs-lisp
(setq org-todo-keywords
    '((sequence "TODO(t)" "PROJ(p)" "ACTIVE(a)" "REVIEW(r)" "START(s)" "NEXT(n)" "WORKING(w)" "HOLD(h)" "|" "DONE(d)" "KILL(k)")
        (sequence "|" "OKAY(o)" "YES(y)" "NO(n)")))

(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("la" . "src latex"))
(add-to-list 'org-structure-template-alist '("ec" . "src emacs-lisp"))
#+end_src
*** Org roam
#+begin_src emacs-lisp
(use-package org-roam
  :config
 (setq org-roam-directory "~/Documents/roam/"
       org-roam-completion-everywhere t
       org-roam-capture-templates
        '(("t" "todo" plain "%?"
            :target (file+head "Todo/${slug}_todo.org" "#+title: ${title} Todo\n#+Data: %T\n#+category: Todo\n#+filetags: %^{Tags}\n\n* Goals\n%^{Goals}\n* TODO ${title} - [/]\n- [ ] %^{Tasks}\n* Related\n[[%^{Related_link}][%^{Related_description}]]")
            :kill-buffer t :prepend t :unnarrowed t)
          ("r" "related" plain "\n[[%^{Related_link}][%^{Related_description}]]"
            :target (file+olp "Todo/${slug}_todo.org" ("Related"))
            :kill-buffer t :prepend t :unnarrowed t)
          ("n" "notes" plain "%?"
            :target (file+head "Notes/${slug}_notes.org" "#+title: ${title}\n#+description: %^{description}\n#+Date: %T\n#+author: Aditya Yadav\n#+category: Notes\n#+filetags: Notes\n\n* %^{Top Heading}")
            :kill-buffer t :prepend t :unnarrowed t)
          ))
 (setq org-roam-dailies-capture-templates
        '(("d" "default" entry "* %?" :target
        (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n\n#+category: daily\n")))))

(defun my/org-roam-remove-category (node)
  (let ((category (list "daily" "Groups")))
  (not (member (cdr (assoc-string "CATEGORY" (org-roam-node-properties node))) category))))

(defun my/org-roam-find-node-custom()
  (interactive)
  (org-roam-node-find nil nil 'my/org-roam-remove-category))
#+end_src

* Custom Function
#+begin_src emacs-lisp
    (defun kitty-async-process ()
      (interactive)
      (start-process "kitty" nil "setsid" "kitty" "-d" default-directory))
  (define-key evil-normal-state-map "," 'kitty-async-process)

    (defun brave-vscode-docs ()
      (interactive)
      (start-process "brave" nil "setsid" "brave" "--incognito" "https://code.visualstudio.com/api/language-extensions/language-server-extension-guide"))

    (defun Competitive-coding-output-input-toggle ()
      (interactive)
      (delete-other-windows)
      (kill-matching-buffers "*.in")
      (+evil/window-vsplit-and-follow)
      (other-window 1)
      (find-file (expand-file-name "inputf.in" default-directory))
      (+evil/window-split-and-follow)
      (other-window 1)
      (find-file (expand-file-name "outputf.in" default-directory))
      (other-window 1)
      (enlarge-window-horizontally 40))
  (evil-define-key 'normal c++-mode-map "C-c z" 'Competitive-coding-output-input-toggle)
  (evil-define-key 'normal rustic-mode-map "C-c z" 'Competitive-coding-output-input-toggle)

    (defun rust-reset()
      (interactive)
      (widen)
      (erase-buffer)
      (insert "<cp")
      (yas-expand)
      (narrow-to-defun))
  (evil-define-key 'normal rustic-mode-map "C-c r" 'rust-reset)

    (defun code-input-refresh()
      (interactive)
      (write-region (current-kill 0) nil (concat default-directory "inputf.in") nil)
      (Competitive-coding-output-input-toggle))
  (evil-define-key 'normal c++-mode-map "C-c z" 'code-input-refresh)
  (evil-define-key 'normal rustic-mode-map "C-c z" 'code-input-refresh)

    ;; source: http://steve.yegge.googlepages.com/my-dot-emacs-file
    (defun copy-current-file (new-name)
      "Copy current file to a NEW-NAME."
      (interactive (list
                    (read-string "New name: " (current-kill 0) nil (current-kill 0))))
      (let ((name (buffer-name))
            (filename (buffer-file-name)))
        (if (not filename)
            (message "Buffer '%s' is not visiting a file!" name)
          (if (get-buffer new-name)
              (message "A buffer named '%s' already exists!" new-name)
              (copy-file filename (concat (replace-regexp-in-string " " "" (capitalize (replace-regexp-in-string "[^[:word:]_]" " " new-name))) ".rs") 1)))))
  (evil-define-key 'normal rustic-mode-map "C-c C-c z" #'copy-current-file)
#+end_src
* Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-;") 'evilnc-comment-or-uncomment-lines)
  (general-create-definer adi/leader-keys
      :states 'normal
      :prefix "SPC")
  (general-create-definer adi/leader-local-keys
      :states 'normal
      :prefix "SPC m")
  (adi/leader-keys
      "SPC" 'find-file
      "RET" 'org-roam-node-find)
#+end_src
** Buffer Map
#+begin_src emacs-lisp
(adi/leader-keys
    "bb" 'consult-buffer
    "bk" 'kill-this-buffer)
#+end_src
** Org Map
#+begin_src emacs-lisp
(adi/leader-local-keys org-mode-map
    "lc" 'org-cliplink)
#+end_src
